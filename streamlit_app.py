import streamlit as st
from snowflake.snowpark import Session
from datetime import datetime

# ---- CONFIG ----
COMPANY_NAME = "–ê–ü–£ –•–•–ö"
SCHEMA_NAME = "APU"
EMPLOYEE_TABLE = "APU_EMP_DATA"
ANSWER_TABLE = f"{SCHEMA_NAME}_SURVEY_ANSWERS"
DATABASE_NAME = "CDNA_HR_DATA"
LOGO_URL = "https://i.imgur.com/DgCfZ9B.png"

# ---- Secure session ----
def get_session():
    return Session.builder.configs(st.secrets["connections.snowflake"]).create()

# ---- Answer storing ----
def submit_answers():
    emp_code = st.session_state.get("confirmed_empcode")
    first_name = st.session_state.get("confirmed_firstname")
    survey_type = st.session_state.get("survey_type", "")
    schema = SCHEMA_NAME
    table = f"{schema}_SURVEY_ANSWERS"
    submitted_at = datetime.utcnow()
    a = st.session_state.answers

    values = [
        emp_code, first_name, survey_type, submitted_at,
        a.get("Reason_for_Leaving", ""), a.get("Alignment_with_Daily_Tasks", ""),
        a.get("Unexpected_Responsibilities", ""), a.get("Onboarding_Effectiveness", ""),
        a.get("Company_Culture", ""), a.get("Atmosphere", ""), a.get("Conflict_Resolution", ""),
        a.get("Feedback", ""), a.get("Leadership_Style", ""), a.get("Team_Collaboration", ""),
        a.get("Team_Support", ""), a.get("Motivation", ""), a.get("Motivation_Other", ""),
        a.get("Engagement", ""), a.get("Engagement_Other", ""), a.get("Well_being", ""),
        a.get("Performance_Compensation", ""), a.get("Value_of_Benefits", ""), a.get("KPI_Accuracy", ""),
        a.get("Career_Growth", ""), a.get("Traning_Quality", ""), a.get("Loyalty1", ""),
        a.get("Loyalty1_Other", ""), a.get("Loyalty2", ""), a.get("Loyalty2_Other", "")
    ]

    try:
        session = get_session()
        escaped_values = ["'{}'".format(str(v).replace("'", "''")) if v is not None else "''" for v in values]
        insert_query = f"""
            INSERT INTO {table} (
                EMPCODE, FIRSTNAME, SURVEY_TYPE, SUBMITTED_AT,
                Reason_for_Leaving, Alignment_with_Daily_Tasks, Unexpected_Responsibilities,
                Onboarding_Effectiveness, Company_Culture, Atmosphere, Conflict_Resolution,
                Feedback, Leadership_Style, Team_Collaboration, Team_Support,
                Motivation, Motivation_Other, Engagement, Engagement_Other, Well_being,
                Performance_Compensation, Value_of_Benefits, KPI_Accuracy, Career_Growth,
                Traning_Quality, Loyalty1, Loyalty1_Other, Loyalty2, Loyalty2_Other
            ) VALUES ({','.join(escaped_values)})
        """
        session.sql(insert_query).collect()
        return True
    except Exception as e:
        st.error(f"‚ùå Failed to submit answers: {e}")
        return False

# ---- Survey types per category ----
survey_types = {
    "–ö–æ–º–ø–∞–Ω–∏–π–Ω —Å–∞–Ω–∞–∞—á–∏–ª–≥–∞–∞—Ä": ["1 –∂–∏–ª —Ö“Ø—Ä—Ç—ç–ª", "1-—ç—ç—Å –¥—ç—ç—à"],
    "–ê–∂–∏–ª—Ç–Ω—ã —Å–∞–Ω–∞–∞—á–ª–∞–≥–∞–∞—Ä": [
        "6 —Å–∞—Ä –¥–æ—Ç–æ—Ä –≥–∞—Ä—á –±–∞–π–≥–∞–∞", "7 —Å–∞—Ä–∞–∞—Å 3 –∂–∏–ª ",
        "4-10 –∂–∏–ª", "11 –±–æ–ª–æ–Ω —Ç“Ø“Ø–Ω—ç—ç—Å –¥—ç—ç—à"
    ],
}

# ---- PAGE SETUP ----
st.set_page_config(page_title=f"{COMPANY_NAME} –°—É–¥–∞–ª–≥–∞–∞", layout="wide")

# ---- UTILS ----
def logo():
    st.image(LOGO_URL, width=210)

def progress_chart():
    total_questions_by_type = {
        "1 –∂–∏–ª —Ö“Ø—Ä—Ç—ç–ª": 17,
        "1-—ç—ç—Å –¥—ç—ç—à": 16,
        "6 —Å–∞—Ä –¥–æ—Ç–æ—Ä –≥–∞—Ä—á –±–∞–π–≥–∞–∞": 20,
        "7 —Å–∞—Ä–∞–∞—Å 3 –∂–∏–ª ": 19,
        "4-10 –∂–∏–ª": 19,
        "11 –±–æ–ª–æ–Ω —Ç“Ø“Ø–Ω—ç—ç—Å –¥—ç—ç—à": 19
    }
    if st.session_state.page < 3:
        return
    current_page = st.session_state.page
    total = total_questions_by_type.get(st.session_state.survey_type, 19)
    question_index = max(1, current_page - 3 + 1)
    progress = min(100, max(0, int((question_index / total) * 100)))
    st.markdown(f"#### –ê—Å—É—É–ª—Ç {question_index} / {total}")
    st.progress(progress)

# ---- SESSION INIT ----
for key, value in [
    ("category_selected", None), ("survey_type", None), ("page", -1),
    ("emp_confirmed", None), ("answers", {}), ("logged_in", False)
]:
    if key not in st.session_state:
        st.session_state[key] = value

# ---- LOGIN PAGE ----
def login_page():
    logo()
    st.title("üë®‚Äçüíº –ù—ç–≤—Ç—Ä—ç—Ö üë©‚Äçüíº")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if username == "hr" and password == "demo123":
            st.session_state.logged_in = True
            st.session_state.page = -0.5
            st.rerun()
        else:
            st.error("‚ùå Invalid credentials.")

# ---- DIRECTORY PAGE ----
def directory_page():
    logo()
    st.title("–°—É–¥–∞–ª–≥–∞–∞–Ω—ã —Å–æ–Ω–≥–æ–ª—Ç")
    option = st.radio("–ê—Å—É—É–ª–≥—ã–Ω —Ç”©—Ä–ª”©”© —Å–æ–Ω–≥–æ–Ω–æ —É—É:", ["üìã Exit Survey", "üé§ Exit Interview"], index=None)
    if st.button("Continue"):
        if option == "üìã Exit Survey":
            st.session_state.page = 0
            st.rerun()
        elif option == "üé§ Exit Interview":
            st.warning("Interview flow coming soon!")
        else:
            st.error("–¢–∞ —Å–æ–Ω–≥–æ–ª—Ç —Ö–∏–π–Ω—ç “Ø“Ø.")

# ---- PAGE 0: CATEGORY + SURVEY TYPE ----
def page_0():
    logo()
    st.header("–ï—Ä”©–Ω—Ö–∏–π –º—ç–¥—ç—ç–ª—ç–ª")
    st.markdown("**–°—É–¥–∞–ª–≥–∞–∞–Ω—ã –∞–Ω–≥–∏–ª–∞–ª –±–æ–ª–æ–Ω —Ç”©—Ä–ª”©”© —Å–æ–Ω–≥–æ–Ω–æ —É—É.**")
    category = st.selectbox(
        "–°—É–¥–∞–ª–≥–∞–∞–Ω—ã –∞–Ω–≥–∏–ª–∞–ª:",
        ["-- –°–æ–Ω–≥–æ—Ö --"] + list(survey_types.keys()),
        index=0 if not st.session_state.category_selected else list(survey_types.keys()).index(st.session_state.category_selected) + 1,
        key="category_select"
    )
    if category != "-- –°–æ–Ω–≥–æ—Ö --":
        st.session_state.category_selected = category
    if st.session_state.category_selected:
        st.markdown("**–°—É–¥–∞–ª–≥–∞–∞–Ω—ã —Ç”©—Ä”©–ª:**")
        types = survey_types[st.session_state.category_selected]
        cols = st.columns(len(types))
        for i, survey in enumerate(types):
            with cols[i]:
                if st.button(survey, key=f"survey_{i}"):
                    st.session_state.survey_type = survey
                    st.session_state.page = 1
                    st.rerun()

# ---- PAGE 1: EMPLOYEE CONFIRMATION ----
def page_1():
    logo()
    st.title("–ê–∂–∏–ª—Ç–Ω—ã –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç")
    st.text_input("–ê–∂–∏–ª—Ç–Ω—ã –∫–æ–¥", key="empcode")
    st.text_input("–ù—ç—Ä", key="firstname")
    if st.button("–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö", key="btn_confirm"):
        empcode = st.session_state.get("empcode", "").strip()
        firstname = st.session_state.get("firstname", "").strip()
        if empcode and firstname:
            try:
                session = get_session()
                df = session.sql(f"""
                    SELECT LASTNAME, FIRSTNAME, POSNAME, HEADDEPNAME, COMPANYNAME
                    FROM {DATABASE_NAME}.{SCHEMA_NAME}.{EMPLOYEE_TABLE}
                    WHERE EMPCODE = '{empcode}' AND FIRSTNAME = '{firstname}'
                """).to_pandas()
                if not df.empty:
                    emp = df.iloc[0]
                    st.session_state.emp_confirmed = True
                    st.session_state.confirmed_empcode = empcode
                    st.session_state.confirmed_firstname = firstname
                    st.session_state.emp_info = {
                        "–ö–æ–º–ø–∞–Ω–∏": emp["COMPANYNAME"],
                        "–ê–ª–±–∞ —Ö—ç–ª—Ç—ç—Å": emp["HEADDEPNAME"],
                        "–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª": emp["POSNAME"],
                        "–û–≤–æ–≥": emp["LASTNAME"],
                        "–ù—ç—Ä": emp["FIRSTNAME"],
                    }
                else:
                    st.session_state.emp_confirmed = False
            except Exception as e:
                st.error(f"‚ùå Snowflake —Ö–æ–ª–±–æ–ª—Ç—ã–Ω –∞–ª–¥–∞–∞: {e}")
    if st.session_state.emp_confirmed is True:
        st.success("‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!")
        emp = st.session_state.emp_info
        st.markdown("### üßæ –¢–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª")
        st.markdown(f"""
            **–ö–æ–º–ø–∞–Ω–∏:** {emp['–ö–æ–º–ø–∞–Ω–∏']}  
            **–ê–ª–±–∞ —Ö—ç–ª—Ç—ç—Å:** {emp['–ê–ª–±–∞ —Ö—ç–ª—Ç—ç—Å']}  
            **–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª:** {emp['–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª']}  
            **–û–≤–æ–≥:** {emp['–û–≤–æ–≥']}  
            **–ù—ç—Ä:** {emp['–ù—ç—Ä']}
        """)
        if st.button("“Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö", key="btn_intro"):
            st.session_state.page = 2
            st.rerun()
    elif st.session_state.emp_confirmed is False:
        st.error("‚ùå –ê–∂–∏–ª—Ç–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞. –ö–æ–¥ –±–æ–ª–æ–Ω –Ω—ç—Ä–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.")

# ---- PAGE 2: UNIVERSAL INTRO ----
def page_2():
    logo()
    st.title(st.session_state.survey_type)
    st.markdown("""
    –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!  
    –¢–∞–Ω—ã ”©–≥—á –±—É–π “Ø–Ω—ç–ª–≥—ç—ç, —Å–∞–Ω–∞–ª —Ö“Ø—Å—ç–ª—Ç –Ω—å –±–∏–¥–Ω–∏–π —Ü–∞–∞—à–¥—ã–Ω —Ö”©–≥–∂–ª–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö–æ–¥ —á—É—Ö–∞–ª “Ø“Ø—Ä—ç–≥—Ç—ç–π —Ç—É–ª –¥–∞—Ä–∞–∞—Ö –∞—Å—É—É–ª—Ç–∞–¥ “Ø–Ω—ç–Ω –∑”©–≤, —á–∏–Ω —Å—ç—Ç–≥—ç–ª—ç—ç—Å—ç—ç —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É.
    """)
    if st.button("–ê—Å—É—É–ª–≥–∞ —ç—Ö–ª—ç—Ö", key="btn_begin"):
        st.session_state.page = 3
        st.rerun()

# ---- ROUTING ----
if not st.session_state.logged_in:
    login_page()
elif st.session_state.page == -0.5:
    directory_page()
elif st.session_state.page == 0:
    page_0()
elif st.session_state.page == 1:
    page_1()
elif st.session_state.page == 2:
    page_2()
elif st.session_state.page == 3:
    page_3()
elif st.session_state.page == 999:
    page_999()
else:
    page_3_and_beyond()




# ---- PAGE 3: FIRST QUESTION (per survey type) ----
def page_3():
    logo()
    progress_chart()
    survey_type = st.session_state.survey_type

    if survey_type == "1 –∂–∏–ª —Ö“Ø—Ä—Ç—ç–ª":
        st.header("1. –ê–∂–ª—ã–Ω –±–∞–π—Ä–Ω—ã —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç –±–æ–ª–æ–Ω ”©–¥”©—Ä —Ç—É—Ç–º—ã–Ω –∞–∂–∏–ª “Ø“Ø—Ä—ç–≥ —Ç–∞–Ω—ã **—Ö“Ø–ª—ç—ç–ª—Ç—ç–¥** –Ω–∏–π—Ü—Å—ç–Ω “Ø“Ø?")
        q1 = st.radio(
            "–¢–∞–Ω—ã “Ø–Ω—ç–ª–≥—ç—ç (1‚Äì5 –æ–¥):",
            ["‚≠ê", "‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"],
            key="q1_1jil",
            index=None
        )
        answer_key = "Alignment_with_Daily_Tasks"

    elif survey_type == "1-—ç—ç—Å –¥—ç—ç—à":
        st.header("1. –ê–∂–ª—ã–Ω –±–∞–π—Ä–Ω—ã —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç —Ç–∞–Ω—ã ”©–¥”©—Ä —Ç—É—Ç–º—ã–Ω –∞–∂–∏–ª “Ø“Ø—Ä—ç–≥—Ç—ç–π –Ω–∏–π—Ü—ç–∂ –±–∞–π—Å–∞–Ω —É—É?")
        q1 = st.radio(
            "–¢–∞–Ω—ã “Ø–Ω—ç–ª–≥—ç—ç (1‚Äì5 –æ–¥):",
            ["‚≠ê", "‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"],
            key="q1_1deesh",
            index=None
        )
        answer_key = "Unexpected_Responsibilities"

    elif survey_type == "6 —Å–∞—Ä –¥–æ—Ç–æ—Ä –≥–∞—Ä—á –±–∞–π–≥–∞–∞":
        st.header("1. –¢–∞–Ω–¥ –∞–∂–ª–∞–∞—Å –≥–∞—Ä–∞—Ö–∞–¥ –Ω”©–ª”©”©–ª—Å”©–Ω —Ö“Ø—á–∏–Ω –∑“Ø–π–ª, —à–∞–ª—Ç–≥–∞–∞–Ω—ã —Ç–∞–ª–∞–∞—Ä –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö—ç–ª–∂ ”©–≥–Ω”© “Ø“Ø?")
        q1_choices = [
            "üöÄ Career Advancement",
            "üí∞ Compensation",
            "‚öñÔ∏è Work-Life Balance",
            "üßë‚Äçüíº Management",
            "üòä Job Satisfaction",
            "üè¢ Company Culture",
            "üì¶ Relocation",
            "üßò Personal Reasons",
            "üì® Better Opportunity, offer",
            "üèóÔ∏è Work Conditions"
        ]
        q1 = st.radio("“Æ–Ω–¥—Å—ç–Ω —à–∞–ª—Ç–≥–∞–∞–Ω—É—É–¥:", q1_choices, key="q1_6sar", index=None)
        answer_key = "Reason_for_Leaving"

    elif survey_type in ["7 —Å–∞—Ä–∞–∞—Å 3 –∂–∏–ª ", "4-10 –∂–∏–ª", "11 –±–æ–ª–æ–Ω —Ç“Ø“Ø–Ω—ç—ç—Å –¥—ç—ç—à"]:
        st.header("1. –¢–∞–Ω–¥ –∞–∂–ª–∞–∞—Å –≥–∞—Ä–∞—Ö–∞–¥ –Ω”©–ª”©”©–ª—Å”©–Ω —Ö“Ø—á–∏–Ω –∑“Ø–π–ª, —à–∞–ª—Ç–≥–∞–∞–Ω—ã —Ç–∞–ª–∞–∞—Ä –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö—ç–ª–∂ ”©–≥–Ω”© “Ø“Ø?")
        q1_choices = [
            "üöÄ Career Advancement",
            "üí∞ Compensation",
            "‚öñÔ∏è Work-Life Balance",
            "üßë‚Äçüíº Management",
            "üòä Job Satisfaction",
            "üè¢ Company Culture",
            "üì¶ Relocation",
            "üßò –•—É–≤–∏–π–Ω —à–∞–ª—Ç–≥–∞–∞–Ω / Personal Reasons",
            "üì® –ò–ª“Ø“Ø –±–æ–ª–æ–º–∂–∏–π–Ω ”©”©—Ä –∞–∂–ª—ã–Ω –±–∞–π—Ä–Ω—ã —Å–∞–Ω–∞–ª –∞–≤—Å–∞–Ω / Better Opportunity, offer",
            "üèóÔ∏è –ê–∂–ª—ã–Ω –Ω”©—Ö—Ü”©–ª / Work Conditions"
        ]
        q1 = st.radio("“Æ–Ω–¥—Å—ç–Ω —à–∞–ª—Ç–≥–∞–∞–Ω—É—É–¥:", q1_choices, key="q1_busad", index=None)
        answer_key = "Reason_for_Leaving"

    # Save answer and move to next page
    if q1 is not None and st.button("–î–∞—Ä–∞–∞–≥–∏–π–Ω –∞—Å—É—É–ª—Ç", key="btn_next_q1"):
        st.session_state.answers[answer_key] = q1
        st.session_state.page = 4
        st.rerun()























